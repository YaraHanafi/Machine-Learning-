# Import stuff
import keras
from keras.datasets import mnist
from keras.models import Sequential 
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D
from keras import backend as K

#Constants 
batch_size= 128
num_classes= 10
epochs= 12
img_rows, img_cols= 28,28
channels=1

#Load in data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

#Normalize and format 
x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, channels).astype("float32")/255
x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, channels).astype("float32")/255
image_shape = (img_rows, img_cols, channels)

#One Hot Encoding 
y_train= keras.utils.to_categorical(y_train, num_classes)
y_test= keras.utils.to_categorical(y_test, num_classes)

#Build Model

model= Sequential()
model.add(Conv2D(32, kernel_size= (3,3), activation='relu',input_shape = image_shape))
model.add(Conv2D(64, kernel_size= (3,3), activation = 'relu', input_shape = image_shape))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Flatten())
model.add(Dense(128, activation = 'relu'))
model.add(Dense(num_classes, activation = 'softmax'))
 
model.compile(loss= keras.losses.categorical_crossentropy,
             optimizer=keras.optimizers.Adadelta(),
             metrics=["accuracy"])

#Train
model.summary()
model.fit (x_train, y_train,
          batch_size=batch_size,
          epochs=epochs,
          verbose=2,
          validation_data=(x_test, y_test)
          )
score=model.evaluate(x_test, y_test)
print(score)
